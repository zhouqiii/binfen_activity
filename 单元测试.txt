1.安装依赖
    npm install jest vue-jest babel-jest @vue/test-utils jest-environment-jsdom -D
    npm i --save-dev jsdom-global //安装jsdom-global
2.编写 jest 配置文件(在src同级目录下新建test文件夹)
    // ./test/unit/jest.conf.js
    const path = require('path');

    module.exports = {
    rootDir: path.resolve(__dirname, '../../'), // 类似 webpack.context
    moduleFileExtensions: [ // 类似 webpack.resolve.extensions
        'js',
        'json',
        'vue',
    ],
    moduleNameMapper: {
        '^@/(.*)$': '<rootDir>/src/$1', // 类似 webpack.resolve.alias
    },
    transform: { // 类似 webpack.module.rules
        '^.+\\.js$': '<rootDir>/node_modules/babel-jest',
        '.*\\.(vue)$': '<rootDir>/node_modules/vue-jest',
    },
    testEnvironment: 'jsdom',
    setupFiles: ['<rootDir>/test/unit/setup'], // 类似 webpack.entry
    coverageDirectory: '<rootDir>/test/unit/coverage', // 类似 webpack.output
    collectCoverageFrom: [ // 类似 webpack 的 rule.include
        'src/**/*.{js,vue}',
        '!src/main.js',
        '!src/router/index.js',
        '!**/node_modules/**',
    ],
    };
3.编写启动文件 setup.js
    // ./test/unit/setup.js
    import Vue from 'vue';
    require('jsdom-global');

    Vue.config.productionTip = false;
4.加入启动 jest 的 npm script(在package.json)
    "scripts": {
    "unit": "jest --config test/unit/jest.conf.js --coverage",
    },
5.编写第一个测试文件
    /*组件*/
    // ./src/components/hello-world/hello-world.vue
    <template>
        <div class="hello">
            <h1>{{ msg }}</h1>
        </div>
    </template>

    <script>
        export default {
            name: 'HelloWorld',
            data() {
                return {
                    msg: 'Hello Jest',
                };
            },
        };
    </script>
    /*对该组件进行测试--可以将测试文件统一放在别的目录下是没问题的，会根据文件名后缀自动扫描到该测试文件*/
    // ./src/components/hello-world/hello-world.spec.js
    import { shallowMount } from '@vue/test-utils';
    import HelloWorld from './hello-world.vue';

    describe('<hello-world/>', () => {
        it('should render correct contents', () => {
            const wrapper = shallowMount(HelloWorld);
            expect(wrapper.find('.hello h1').text())
                .toEqual('Hello Jest');
        });
    });
6.启动测试-jest 会自动扫描项目目录下所有文件名以 .spec.js/.test.js 结尾的测试文件，并执行测试用例。
    npm run unit
7.到这一步已经可以开始编写测试代码但每次对代码的改动都需要手动执行 jest 启动命令，没有类似 hot-reload 的功能，
    a) 最简单且体验最好的一种方式 -> 在 vscode 编辑器安装一个名为 jest 的插件
    b) 安装后它可能还不能很好的工作，因为 vscode-jest 暂时并不知道我们的 jest 配置文件在哪里,解决方式:
        1)修改 vscode 配置文件settings.json，将 jest.pathToConfig 指向我们刚才编写的配置文件:
            {
                "jest.pathToConfig": "./test/unit/jest.conf.js"
            }
        2)将 jest 配置写在 package.json 中的 jest 字段
        3)将 jest 配置文件提到项目根目录，并且更名为 jest.config.js 或者 jest.json
现在 vs-code-jest 会根据 git 修改记录自动执行应该执行的测试文件，并在控制台实时给出测试结果
